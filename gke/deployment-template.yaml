---
apiVersion: v1
kind: Service
metadata:
  namespace: backend
  name: backend-${CI_COMMIT_REF_NAME}
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: ${CI_COMMIT_REF_NAME}
spec:
  selector:
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: ${CI_COMMIT_REF_NAME}
  ports:
    - protocol: TCP
      name: http
      port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: backend
  name: backend-${CI_COMMIT_REF_NAME}
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: ${CI_COMMIT_REF_NAME}
spec:
  revisionHistoryLimit: 2
  minReadySeconds: 5
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
      app.kubernetes.io/instance: ${CI_COMMIT_REF_NAME}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backend
        app.kubernetes.io/instance: ${CI_COMMIT_REF_NAME}
    spec:
      volumes:
        # Add the ConfigMap we declared above as a volume for the pod
        - name: nginx-config-volume
          configMap:
            name: nginx-config
        - name: nginx-vhost-config-volume
          configMap:
            name: nginx-vhost-config
        # Create the shared files volume to be used in both pods
        - name: shared-files
          emptyDir: { }
      initContainers:
        - args:
            - /bin/bash
            - -c
            - (php artisan migrate || true) && (php artisan config:cache || true) && (php artisan route:cache || true) && (php artisan key:generate || true)
          envFrom:
            - secretRef:
                name: backend-config
          image: ${AWS_DOCKER_REGISTRY}/eventizer/backend:app-${CI_COMMIT_REF_NAME}
          imagePullPolicy: Always
          name: artisan
      containers:
        - name: backend-app
          image: ${AWS_DOCKER_REGISTRY}/eventizer/backend:app-${CI_COMMIT_REF_NAME}
          envFrom:
            - secretRef:
                name: backend-config
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9000
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 15
            tcpSocket:
              port: 9000
            timeoutSeconds: 30
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: 9000
          resources:
            limits:
              cpu: 2
            requests:
              cpu: 1
              memory: 500Mi
          volumeMounts:
            - name: shared-files
              mountPath: /app
          lifecycle:
            postStart:
              exec:
                command: [ "/bin/sh", "-c", "cp -r /var/www/. /app" ]

        - name: backend-web
          image: nginx
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 15
            tcpSocket:
              port: 80
            timeoutSeconds: 30
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: 80
          resources:
            limits:
              cpu: 1
            requests:
              memory: 500Mi
              cpu: 500m
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-vhost-config-volume
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: vhost.conf
            - name: shared-files
              mountPath: /var/www/html
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  namespace: backend
  name: backend-${CI_COMMIT_REF_NAME}
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: ${CI_COMMIT_REF_NAME}
spec:
  entryPoints:
    - https
  routes:
    - match: Host(`${HOST_DOMAIN}`)
      kind: Rule
      services:
        - namespace: backend
          name: backend-${CI_COMMIT_REF_NAME}
          port: 80
  tls:
    certResolver: letsencrypt
    domains:
      - main: "${HOST_ROOT_DOMAIN}"
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: backend
  namespace: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-${CI_COMMIT_REF_NAME}
  minReplicas: 3
  maxReplicas: 16
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
