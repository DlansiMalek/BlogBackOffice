image: docker:stable
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay

cache:
  paths:
    - vendor/


stages:
  - build
  - package
  - deploy

build:
  stage: build
  image: bitnami/laravel
  only:
    - master
    - develop
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
  artifacts:
    paths:
      - vendor/
    expire_in: 1 days

docker-package:
  stage: package
  services:
    - docker:dind
  only:
    - master
    - develop
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  after_script:
    - docker logout "$CI_REGISTRY"
  script:
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - docker build --pull -t "$IMAGE_NAME" -f docker/app.docker .
    - docker push "$IMAGE_NAME"
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - docker build --pull -t "$IMAGE_NAME" -f docker/web.docker .
    - docker push "$IMAGE_NAME"


ansible-deploy-prod:
  stage: deploy
  image: mullnerz/ansible-playbook:2.9.1
  only:
    - master
  before_script:
    - chmod 600 $SSH_KEY
    - export APP_IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - export WEB_IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - export DEPLOY_TARGET=prod
    - cd ansible
  after_script:
    - cd ..
  script:
    - ansible-playbook --key-file $SSH_KEY playbook.yml

ansible-deploy-dev:
  stage: deploy
  image: mullnerz/ansible-playbook:2.9.1
  only:
    - develop
  before_script:
    - chmod 600 $SSH_KEY
    - export APP_IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - export WEB_IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - export DEPLOY_TARGET=dev
    - cd ansible
  after_script:
    - cd ..
  script:
    - ansible-playbook --key-file $SSH_KEY playbook.yml
