image: docker:stable

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  MYSQL_DATABASE: eventizer_v3_testing
  MYSQL_ROOT_PASSWORD: root
  DB_HOST: mysql
  DB_USERNAME: root
  DB_PASSWORD: root
  DB_DATABASE: eventizer_v3_testing

stages:
  - build
  - test
  - aws-auth
  - package
  - deploy
  - package-manual
  - deploy-manual
  - backup

# Build stage
build:
  stage: build
  image: registry.gitlab.master.ssd.vps.vayetek.com/vayetek/devops/composer:master
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
  artifacts:
    paths:
      - vendor/
    expire_in: 2 hours

# Test stage
testing:
  stage: test
  services:
    - mysql:5.7
  image: registry.gitlab.master.ssd.vps.vayetek.com/vayetek/devops/composer:master
  before_script:
    - cp $ENV_TESTING .env.testing
  script:
    - php artisan migrate --env=testing
    - php artisan db:seed --env=testing
    - php artisan test
  after_script:
    - rm .env.testing

# Aws token
ansible-aws-auth:
  stage: aws-auth
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  only:
    - master
    - develop
  script:
    - aws ecr get-login-password --region eu-west-3 > AWS_REGISTRY_TOKEN
  artifacts:
    paths:
      - AWS_REGISTRY_TOKEN
    expire_in: 12 hours

# Package stage
docker-package:
  stage: package
  services:
    - docker:dind
  only:
    - master
    - develop
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - cat AWS_REGISTRY_TOKEN | docker login --username AWS --password-stdin $AWS_DOCKER_REGISTRY
  after_script:
    - docker logout "$CI_REGISTRY"
  script:
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - IMAGE_NAME_AWS="$AWS_DOCKER_REGISTRY/eventizer/$CI_PROJECT_NAME:app-$CI_COMMIT_REF_NAME"
    - docker build --pull -t "$IMAGE_NAME" -t "$IMAGE_NAME_AWS" -f docker/app.docker .
    - docker push "$IMAGE_NAME"
    - docker push "$IMAGE_NAME_AWS"
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - IMAGE_NAME_AWS="$AWS_DOCKER_REGISTRY/eventizer/$CI_PROJECT_NAME:web-$CI_COMMIT_REF_NAME"
    - docker build --pull -t "$IMAGE_NAME" -t "$IMAGE_NAME_AWS"  -f docker/web.docker .
    - docker push "$IMAGE_NAME"

docker-package-feat:
  stage: package-manual
  services:
    - docker:dind
  when: manual
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  after_script:
    - docker logout "$CI_REGISTRY"
  script:
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:app-feat"
    - docker build --pull -t "$IMAGE_NAME" -f docker/app.docker .
    - docker push "$IMAGE_NAME"
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:web-feat"
    - docker build --pull -t "$IMAGE_NAME" -f docker/web.docker .
    - docker push "$IMAGE_NAME"


# Deploy stage
ansible-deploy-prod:
  stage: deploy
  image: mullnerz/ansible-playbook:2.9.1
  only:
    - master
  before_script:
    - chmod 600 $SSH_KEY
    - export APP_IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - export WEB_IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - export DEPLOY_TARGET=prod
    - cd ansible
  after_script:
    - cd ..
  script:
    - ansible-playbook --key-file $SSH_KEY playbook.yml

ansible-deploy-prod-gke:
  stage: deploy
  image: google/cloud-sdk
  when: manual
  only:
    - master
  before_script:
    - gcloud auth activate-service-account --key-file ${GCP_AUTH}
    - gcloud --quiet config set project ${GCP_PROJECT}
    - gcloud config set compute/zone ${GCP_ZONE}
    - gcloud container clusters get-credentials ${GCP_KUBE_CLUSTER} --zone ${GCP_ZONE} --project ${GCP_PROJECT}
    - cd gke
    - export HOST_DOMAIN=api.eventizer.io
    - export HOST_ROOT_DOMAIN=*.eventizer.io
    - apt-get install -qq -y gettext
  after_script:
    - cd ..
  script:
    - envsubst < deployment-template.yaml > deployment.yaml
    - kubectl -n backend apply -f deployment.yaml
    - kubectl rollout restart deployment backend-master -n backend

ansible-deploy-prod-aws:
  stage: deploy
  image: registry.gitlab.master.ssd.vps.vayetek.com/vayetek/devops/aws-eks:master
  only:
    - master
  before_script:
    - aws eks --region eu-west-3 update-kubeconfig --name eventizer-prod
    - cd gke
    - export HOST_DOMAIN=api.eventizer.io
    - export HOST_ROOT_DOMAIN=*.eventizer.io
    - apt-get install -qq -y gettext
  after_script:
    - cd ..
  script:
    - envsubst < deployment-template.yaml > deployment.yaml
    - kubectl -n backend apply -f deployment.yaml
    - kubectl rollout restart deployment backend-master -n backend

ansible-deploy-dev:
  stage: deploy
  image: mullnerz/ansible-playbook:2.9.1
  only:
    - develop
  before_script:
    - chmod 600 $SSH_KEY
    - export APP_IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - export WEB_IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - export DEPLOY_TARGET=dev
    - cd ansible
  after_script:
    - cd ..
  script:
    - ansible-playbook --key-file $SSH_KEY playbook.yml

# Deploy stage
ansible-deploy-prod-manual:
  stage: deploy-manual
  image: mullnerz/ansible-playbook:2.9.1
  when: manual
  only:
    - master
  before_script:
    - chmod 600 $SSH_KEY
    - export APP_IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - export WEB_IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - export DEPLOY_TARGET=prod
    - cd ansible
  after_script:
    - cd ..
  script:
    - ansible-playbook --key-file $SSH_KEY playbook.yml

ansible-deploy-dev-manual:
  stage: deploy-manual
  image: mullnerz/ansible-playbook:2.9.1
  when: manual
  only:
    - develop
  before_script:
    - chmod 600 $SSH_KEY
    - export APP_IMAGE_NAME="$CI_REGISTRY_IMAGE:app-$CI_COMMIT_REF_NAME"
    - export WEB_IMAGE_NAME="$CI_REGISTRY_IMAGE:web-$CI_COMMIT_REF_NAME"
    - export DEPLOY_TARGET=dev
    - cd ansible
  after_script:
    - cd ..
  script:
    - ansible-playbook --key-file $SSH_KEY playbook.yml

ansible-deploy-feat-manual:
  stage: deploy-manual
  image: mullnerz/ansible-playbook:2.9.1
  when: manual
  before_script:
    - chmod 600 $SSH_KEY
    - export APP_IMAGE_NAME="$CI_REGISTRY_IMAGE:app-feat"
    - export WEB_IMAGE_NAME="$CI_REGISTRY_IMAGE:web-feat"
    - export DEPLOY_TARGET=feat
    - export CI_COMMIT_REF_NAME=feat
    - cd ansible
  after_script:
    - cd ..
  script:
    - ansible-playbook --key-file $SSH_KEY playbook.yml

# Backup stages
backup-bitbucket:
  stage: backup
  image: registry.gitlab.master.ssd.vps.vayetek.com/vayetek/devops/git:master
  only:
    - master
    - develop
  before_script:
    - git checkout $CI_COMMIT_REF_NAME
    - git pull
    - eval $(ssh-agent -s)
    - ssh-add -D
    - chmod 600 $BITBUCKET_RSA
    - ssh-add $BITBUCKET_RSA
    - ssh git@bitbucket.com
  script:
    - git remote add bitbucket git@bitbucket.org:vayetek/congress-backend-modules.git
    - git push bitbucket $CI_COMMIT_REF_NAME
  after_script:
    - git remote remove bitbucket
    - ssh-add -D
